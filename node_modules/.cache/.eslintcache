[{"/Users/shiromadaiki/Documents/react_lessons/todo_frontend/src/index.js":"1","/Users/shiromadaiki/Documents/react_lessons/todo_frontend/src/App.js":"2","/Users/shiromadaiki/Documents/react_lessons/todo_frontend/src/components/AddTodo.jsx":"3","/Users/shiromadaiki/Documents/react_lessons/todo_frontend/src/components/TodoList.jsx":"4"},{"size":259,"mtime":1675318520373,"results":"5","hashOfConfig":"6"},{"size":378,"mtime":1675658896956,"results":"7","hashOfConfig":"6"},{"size":2584,"mtime":1675658852268,"results":"8","hashOfConfig":"6"},{"size":3577,"mtime":1675764110500,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"oecw0v",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/shiromadaiki/Documents/react_lessons/todo_frontend/src/index.js",[],[],[],"/Users/shiromadaiki/Documents/react_lessons/todo_frontend/src/App.js",[],[],"/Users/shiromadaiki/Documents/react_lessons/todo_frontend/src/components/AddTodo.jsx",["25","26"],[],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport styled from 'styled-components'\nimport { TextInput } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { Modal, Button, Group, Text } from '@mantine/core';\n\nfunction AddTodo() {\n  const [todos, setTodos] = useState([]);\n  const [todoName, setTodoName] = useState(\"\");\n  const [opened, { close, open }] = useDisclosure(false);\n  \n  const Button_div  =styled.div`\n  display:flex;\n`;\n\n  const getTodos = () => {\n    return axios\n      .get(\"http://localhost:3000/todos\")\n      .then((res) => {\n        if (res !== ''){\n          setTodos(res.data);\n        }\n      })\n      .catch(() => console.error);\n  };\n\n  const createTodo = (e) => {\n  \n    if (todoName!==''){\n     axios\n     .post(\"http://localhost:3000/todos\", {\n       name: todoName,\n       complete: false,\n     })\n     .then(() => {\n       setTodoName(\"\");\n     })\n     .catch(() => console.error);\n    }\n    else{\n     alert(\"入力欄が空です\");\n    }\n    return;\n };\n\n const ClearDoneTask=()=>{\n     axios.delete(`http://localhost:3000/todos/destroy_doneTask`)\n     .then(()=> {\n      \n     })\n     .catch(e => {\n       console.log(e)\n    })\n \n};\n\nconst deleteAllTodo=()=>{\n   let res=window.confirm(\"TODOリストを全て削除しますか？\");\n    if (res) {\n      axios.delete(`http://localhost:3000/todos/destroy_all`)\n      .then(()=> {\n        setTodos([])\n      })\n      .catch(e => {\n        console.log(e)\n     })\n  }\n};\n\nuseEffect(() => {\n  getTodos();\n}, []);\n\n  return (\n    <>\n      <h1>Add New Todo</h1>\n      <>\n          <TextInput\n            placeholder=\"Task name\"\n            type=\"text\"\n            value={todoName}\n            onChange={(e) => setTodoName(e.target.value)}\n          />\n        \n      <Button_div >\n       <Button type=\"submit\" onClick={(e) => createTodo(e)}>\n          ADD\n        </Button>\n        \n       <Modal opened={opened} onClose={close} size=\"auto\" title=\"Select Button!!\">\n        <Text>Delete only <b>Done Task?</b> or <b>All Task?</b></Text>\n         <Group mt=\"xl\">\n          <Button variant=\"outline\" type=\"submit\"   onClick={() => ClearDoneTask()}>\n            Clear Done Task\n          </Button>\n          <Button variant=\"outline\" type=\"submit\"  color=\"red\"  onClick={() => deleteAllTodo()}>\n            Delete All Task\n          </Button>\n        </Group>\n       </Modal>\n\n       <Group position=\"left\" >\n        <Button color=\"red\" onClick={open}>Delete</Button>\n       </Group>\n      </Button_div>\n\n      </>\n    </>\n  )\n}\n\nexport default AddTodo","/Users/shiromadaiki/Documents/react_lessons/todo_frontend/src/components/TodoList.jsx",["27","28","29","30","31","32","33","34","35"],[],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport styled from 'styled-components'\nimport { Checkbox } from '@mantine/core';\nimport { CloseButton } from '@mantine/core';\nimport { List } from '@mantine/core';\nimport { Popover, Button, TextInput } from '@mantine/core';\n\nconst Task_ul  =styled.ul`\n  \n`;\n\nconst Task_li  =styled.li`\n\nlist-style:none;\nfont-size:25px;\ndisplay:flex;\n`;\n\nconst TaskName_div = styled.div`\n  width:450px;\n \n`;\n\nconst TaskName = styled.p`\n width:100%;\n word-wrap: break-word;\n`;\n\n\nconst Button_li = styled.li`\n  list-style:none;\n  padding-top:20px;\n \n`;\n\nconst Checkbox_div = styled.div`\n  padding-left:30px;\n  padding-top:13px;\n`;\n\nconst Edit_div=styled.div`\n  \n`;\n\nconst CloseButton_div=styled.div`\n\n`;\n\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);  \n  const [todoName, setTodoName] = useState(\"\");\n\n  const getTodos = () => {\n    return axios\n      .get(\"http://localhost:3000/todos\")\n      .then((res) => {\n        if (res !== ''){\n          setTodos(res.data);\n        }\n      })\n      .catch(() => console.error);\n  };\n\n  const toggleComplete = async (id, index) => {\n    const complete = todos[index].complete;\n    await axios.put(`http://localhost:3000/todos/${id}`, {\n      complete: !complete,\n    });\n    getTodos();\n  };\n\n  const editTaskName = async (e,id) => {\n    await axios.put(`http://localhost:3000/todos/${id}`, {\n      name: todoName\n    });\n    getTodos();\n  };\n\n\n  const deleteTodo = async(todoId,index) => {\n\n    const complete = todos[index].complete;\n\n    await axios.put(`http://localhost:3000/todos/${todoId}`, {\n      complete: !complete\n    });\n\n    axios.delete(`http://localhost:3000/todos/${todoId}`)\n      .then(() => \n      getTodos()\n      )\n      .catch(console.error());\n\n  };\n\n\n  useEffect(() => \n  {getTodos();}, [todos]);\n  \n\n  return (\n    <>\n      <h1>Your Todo List</h1>\n      <Task_ul>\n      {todos.map((todo, index) => (\n        <List size=\"xl\">\n        <List.Item> \n        <Task_li index={index}>\n           \n          <TaskName_div> \n            <TaskName>{todo.complete ? <s>{todo.name}</s>: todo.name}\n            </TaskName>\n          </TaskName_div>\n\n          <Button_li>\n          <Edit_div style={{display: todo.complete?  \"none\":\"block\" }} >\n            <Popover width={300} trapFocus position=\"bottom\" withArrow shadow=\"md\">\n              <Popover.Target>\n                <Button size=\"xs\" color=\"dark\">Edit</Button>\n               </Popover.Target>\n             <Popover.Dropdown >\n               <TextInput label=\"New task name\" placeholder=\"\" size=\"xs\" \n               type=\"text\"\n               value={todoName}\n               onChange={(e) => setTodoName(e.target.value)}/>\n                <Button size=\"xs\" color=\"dark\" type=\"submit\" onClick={(e) => editTaskName(e,todo.id)}>Change</Button>\n             </Popover.Dropdown>\n            </Popover>\n          </Edit_div>\n          </Button_li>\n         \n          <Button_li>\n            <Checkbox_div>\n             <Checkbox  checked={todo.complete ? true: false} onClick={() => toggleComplete(todo.id, index)}/>\n            </Checkbox_div>\n          </Button_li>\n\n          <Button_li>\n            <CloseButton_div style={{display: todo.complete?  \"none\":\"block\" }}>\n             <CloseButton  onClick={() => deleteTodo(todo.id, index)} title=\"Close popover\" size=\"xl\" iconSize={15} color=\"red\" />\n            </CloseButton_div>\n          </Button_li>\n          \n        </Task_li>\n        </List.Item>\n           </List>\n      ))}\n    </Task_ul>\n\n    </>\n  )\n}\n\nexport default TodoList",{"ruleId":"36","severity":1,"message":"37","line":9,"column":10,"nodeType":"38","messageId":"39","endLine":9,"endColumn":15},{"ruleId":"40","severity":1,"message":"41","line":86,"column":7,"nodeType":"42","messageId":"43","endLine":86,"endColumn":20},{"ruleId":"40","severity":1,"message":"44","line":106,"column":7,"nodeType":"42","messageId":"43","endLine":106,"endColumn":16},{"ruleId":"40","severity":1,"message":"45","line":110,"column":9,"nodeType":"42","messageId":"43","endLine":110,"endColumn":32},{"ruleId":"40","severity":1,"message":"46","line":112,"column":11,"nodeType":"42","messageId":"43","endLine":112,"endColumn":25},{"ruleId":"40","severity":1,"message":"47","line":117,"column":11,"nodeType":"42","messageId":"43","endLine":117,"endColumn":22},{"ruleId":"40","severity":1,"message":"48","line":118,"column":11,"nodeType":"42","messageId":"43","endLine":118,"endColumn":73},{"ruleId":"40","severity":1,"message":"47","line":134,"column":11,"nodeType":"42","messageId":"43","endLine":134,"endColumn":22},{"ruleId":"40","severity":1,"message":"49","line":135,"column":13,"nodeType":"42","messageId":"43","endLine":135,"endColumn":27},{"ruleId":"40","severity":1,"message":"47","line":140,"column":11,"nodeType":"42","messageId":"43","endLine":140,"endColumn":22},{"ruleId":"40","severity":1,"message":"50","line":141,"column":13,"nodeType":"42","messageId":"43","endLine":141,"endColumn":81},"no-unused-vars","'todos' is assigned a value but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component Button_div must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Task_ul must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Task_li must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component TaskName_div must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Button_li must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Edit_div must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Checkbox_div must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CloseButton_div must be in PascalCase or SCREAMING_SNAKE_CASE"]